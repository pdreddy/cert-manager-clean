package com.example.batch.config;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.transaction.PlatformTransactionManager;

import java.time.LocalDate;
import java.util.List;

@Configuration
@EnableBatchProcessing
@EnableScheduling
public class CertificateCleanupJobConfig {

    @Autowired
    private JobRepository jobRepository;

    @Autowired
    private PlatformTransactionManager transactionManager;

    @Autowired
    private JobLauncher jobLauncher;

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    @Autowired
    private CertificateRepository certificateRepository;

    // Step definition
    @Bean
    public Step deleteExpiredCertificatesStep() {
        return new StepBuilder("deleteExpiredCertificatesStep", jobRepository)
                .tasklet((contribution, chunkContext) -> {
                    LocalDate yesterday = LocalDate.now().minusDays(1);

                    // 1. Fetch expired certificates
                    List<Certificate> expired = certificateRepository.findByExpiryDate(yesterday);
                    System.out.println("Found expired certificates: " + expired.size());

                    // 2. Delete from DB
                    certificateRepository.deleteAll(expired);
                    System.out.println("Deleted expired certificates from DB.");

                    // 3. Delete from Redis
                    expired.forEach(cert -> {
                        String key = "cert:" + cert.getId();
                        redisTemplate.delete(key);
                        System.out.println("Deleted cache key: " + key);
                    });

                    return RepeatStatus.FINISHED;
                }, transactionManager)
                .build();
    }

    // Job definition
    @Bean
    public Job deleteExpiredCertificatesJob() {
        return new JobBuilder("deleteExpiredCertificatesJob", jobRepository)
                .start(deleteExpiredCertificatesStep())
                .build();
    }

    // Scheduler to launch the job every minute
    @Scheduled(fixedRate = 60000)
    public void runJob() throws Exception {
        JobParameters params = new JobParametersBuilder()
                .addLong("time", System.currentTimeMillis()) // ensures uniqueness
                .toJobParameters();

        jobLauncher.run(deleteExpiredCertificatesJob(), params);
    }
}
