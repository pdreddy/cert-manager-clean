package com.example.batch.config;

import com.example.batch.entity.Certificate;
import com.example.batch.service.CertificateCleanupService;
import org.springframework.batch.core.*;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.*;
import org.springframework.batch.support.transaction.ResourcelessTransactionManager;
import org.springframework.context.annotation.*;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.transaction.PlatformTransactionManager;

import java.util.List;

@Configuration
@EnableBatchProcessing
@EnableScheduling
public class BatchConfig {

    private final CertificateCleanupService cleanupService;

    public BatchConfig(CertificateCleanupService cleanupService) {
        this.cleanupService = cleanupService;
    }

    @Bean
    public Job certificateCleanupJob(JobRepository jobRepository, PlatformTransactionManager transactionManager) {
        return new JobBuilder("certificateCleanupJob", jobRepository)
                .start(new StepBuilder("deleteExpiredCertificatesStep", jobRepository)
                        .<Certificate, Certificate>chunk(10, transactionManager)
                        .reader(certificateItemReader())
                        .processor(cert -> cert)
                        .writer(items -> cleanupService.deleteCertificates(items))
                        .build())
                .build();
    }

    @Bean
    public ItemReader<Certificate> certificateItemReader() {
        List<Certificate> expired = cleanupService.findExpiredCertificates();
        return new ListItemReader<>(expired);
    }

    @Bean
    public PlatformTransactionManager transactionManager() {
        return new ResourcelessTransactionManager();
    }

    // Run every midnight
    @Scheduled(cron = "0 0 0 * * ?")
    public void runBatchJob(JobLauncher jobLauncher, Job certificateCleanupJob) throws Exception {
        JobParameters params = new JobParametersBuilder()
                .addLong("time", System.currentTimeMillis())
                .toJobParameters();
        jobLauncher.run(certificateCleanupJob, params);
    }
}
